package com.ambiguous.fixpoint.service;

import com.ambiguous.fixpoint.entity.Report;
import com.ambiguous.fixpoint.entity.User;
import com.ambiguous.fixpoint.entity.Comment;
import com.ambiguous.fixpoint.repository.ReportRepository;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Service
public class PDFExportService {

    @Autowired
    private ReportRepository reportRepository;

    private static final Font TITLE_FONT = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
    private static final Font HEADER_FONT = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);
    private static final Font NORMAL_FONT = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);
    private static final Font SMALL_FONT = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);

    public byte[] exportReportsToPDF(List<Long> reportIds, Map<String, Object> options, User currentUser) {
        try {
            Document document = new Document(PageSize.A4);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            
            document.open();
            
            // Add header
            addDocumentHeader(document, "Reports Export", currentUser);
            
            // Export each report
            for (int i = 0; i < reportIds.size(); i++) {
                Long reportId = reportIds.get(i);
                Report report = reportRepository.findById(reportId).orElse(null);
                
                if (report != null && canUserAccessReport(report, currentUser)) {
                    if (i > 0) {
                        document.newPage();
                    }
                    addReportToDocument(document, report, options);
                }
            }
            
            document.close();
            return baos.toByteArray();
            
        } catch (Exception e) {
            throw new RuntimeException("Error generating PDF: " + e.getMessage(), e);
        }
    }

    public byte[] exportSingleReportToPDF(Long reportId, Map<String, Object> options, User currentUser) {
        try {
            Report report = reportRepository.findById(reportId)
                    .orElseThrow(() -> new RuntimeException("Report not found"));
            
            if (!canUserAccessReport(report, currentUser)) {
                throw new RuntimeException("Access denied to this report");
            }
            
            Document document = new Document(PageSize.A4);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            
            document.open();
            
            // Add header
            addDocumentHeader(document, "Report #" + reportId, currentUser);
            
            // Add report content
            addReportToDocument(document, report, options);
            
            document.close();
            return baos.toByteArray();
            
        } catch (Exception e) {
            throw new RuntimeException("Error generating PDF: " + e.getMessage(), e);
        }
    }

    private void addDocumentHeader(Document document, String title, User user) throws DocumentException {
        // Title
        Paragraph titlePara = new Paragraph(title, TITLE_FONT);
        titlePara.setAlignment(Element.ALIGN_CENTER);
        titlePara.setSpacingAfter(10);
        document.add(titlePara);
        
        // Generated info
        Paragraph infoPara = new Paragraph(
            "Generated on: " + java.time.LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) +
            " | Generated by: " + user.getFullName(), SMALL_FONT);
        infoPara.setAlignment(Element.ALIGN_CENTER);
        infoPara.setSpacingAfter(20);
        document.add(infoPara);
        
        // Add simple separator
        document.add(Chunk.NEWLINE);
    }

    private void addReportToDocument(Document document, Report report, Map<String, Object> options) throws DocumentException {
        boolean includeImages = (Boolean) options.getOrDefault("includeImages", true);
        boolean includeComments = (Boolean) options.getOrDefault("includeComments", true);
        boolean includeProgress = (Boolean) options.getOrDefault("includeProgress", true);
        boolean includeMetadata = (Boolean) options.getOrDefault("includeMetadata", true);
        String format = (String) options.getOrDefault("format", "detailed");
        
        // Report header
        Paragraph reportHeader = new Paragraph("Report #" + report.getId(), HEADER_FONT);
        reportHeader.setSpacingAfter(10);
        document.add(reportHeader);
        
        // Basic information table
        PdfPTable infoTable = new PdfPTable(2);
        infoTable.setWidthPercentage(100);
        infoTable.setSpacingAfter(15);
        
        addTableRow(infoTable, "Title:", report.getTitle(), NORMAL_FONT);
        addTableRow(infoTable, "Category:", report.getCategory().toString(), NORMAL_FONT);
        addTableRow(infoTable, "Status:", report.getStatus().toString(), NORMAL_FONT);
        addTableRow(infoTable, "Priority:", report.getPriority().toString(), NORMAL_FONT);
        addTableRow(infoTable, "Reported By:", report.getReporter().getFullName(), NORMAL_FONT);
        addTableRow(infoTable, "Created:", report.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")), NORMAL_FONT);
        
        if (report.getAssignedTo() != null) {
            addTableRow(infoTable, "Assigned To:", report.getAssignedTo().getFullName(), NORMAL_FONT);
        }
        
        if (report.getResolvedAt() != null) {
            addTableRow(infoTable, "Resolved:", report.getResolvedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")), NORMAL_FONT);
        }
        
        document.add(infoTable);
        
        // Description
        if (report.getDescription() != null && !report.getDescription().isEmpty()) {
            Paragraph descHeader = new Paragraph("Description:", HEADER_FONT);
            descHeader.setSpacingBefore(10);
            document.add(descHeader);
            
            Paragraph description = new Paragraph(report.getDescription(), NORMAL_FONT);
            description.setSpacingAfter(15);
            document.add(description);
        }
        
        // Location information
        if (report.getLatitude() != null && report.getLongitude() != null) {
            Paragraph locationHeader = new Paragraph("Location:", HEADER_FONT);
            document.add(locationHeader);
            
            PdfPTable locationTable = new PdfPTable(2);
            locationTable.setWidthPercentage(100);
            locationTable.setSpacingAfter(15);
            
            if (report.getLocationAddress() != null && !report.getLocationAddress().isEmpty()) {
                addTableRow(locationTable, "Address:", report.getLocationAddress(), NORMAL_FONT);
            }
            addTableRow(locationTable, "Coordinates:", 
                String.format("%.6f, %.6f", report.getLatitude(), report.getLongitude()), NORMAL_FONT);
            
            document.add(locationTable);
        }
        
        // Progress information
        if (includeProgress && format.equals("detailed")) {
            addProgressSection(document, report);
        }
        
        // Comments section
        if (includeComments && format.equals("detailed") && report.getComments() != null && !report.getComments().isEmpty()) {
            addCommentsSection(document, report);
        }
        
        // Metadata
        if (includeMetadata && format.equals("detailed")) {
            addMetadataSection(document, report);
        }
    }

    private void addProgressSection(Document document, Report report) throws DocumentException {
        Paragraph progressHeader = new Paragraph("Progress Information:", HEADER_FONT);
        progressHeader.setSpacingBefore(15);
        document.add(progressHeader);
        
        PdfPTable progressTable = new PdfPTable(2);
        progressTable.setWidthPercentage(100);
        progressTable.setSpacingAfter(15);
        
        if (report.getProgressPercentage() != null) {
            addTableRow(progressTable, "Progress:", report.getProgressPercentage() + "%", NORMAL_FONT);
        }
        
        if (report.getWorkStage() != null) {
            addTableRow(progressTable, "Work Stage:", report.getWorkStage().toString(), NORMAL_FONT);
        }
        
        if (report.getProgressNotes() != null && !report.getProgressNotes().isEmpty()) {
            addTableRow(progressTable, "Progress Notes:", report.getProgressNotes(), NORMAL_FONT);
        }
        
        if (report.getResolutionNotes() != null && !report.getResolutionNotes().isEmpty()) {
            addTableRow(progressTable, "Resolution Notes:", report.getResolutionNotes(), NORMAL_FONT);
        }
        
        document.add(progressTable);
    }

    private void addCommentsSection(Document document, Report report) throws DocumentException {
        Paragraph commentsHeader = new Paragraph("Comments:", HEADER_FONT);
        commentsHeader.setSpacingBefore(15);
        document.add(commentsHeader);
        
        for (Comment comment : report.getComments()) {
            PdfPTable commentTable = new PdfPTable(1);
            commentTable.setWidthPercentage(100);
            commentTable.setSpacingAfter(10);
            
            // Comment header
            String commentHeader = comment.getUser().getFullName() + " - " + 
                comment.getCreatedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
            PdfPCell headerCell = new PdfPCell(new Phrase(commentHeader, SMALL_FONT));
            headerCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            headerCell.setBorder(Rectangle.BOX);
            commentTable.addCell(headerCell);
            
            // Comment content
            PdfPCell contentCell = new PdfPCell(new Phrase(comment.getContent(), NORMAL_FONT));
            contentCell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
            commentTable.addCell(contentCell);
            
            document.add(commentTable);
        }
    }

    private void addMetadataSection(Document document, Report report) throws DocumentException {
        Paragraph metadataHeader = new Paragraph("Additional Information:", HEADER_FONT);
        metadataHeader.setSpacingBefore(15);
        document.add(metadataHeader);
        
        PdfPTable metadataTable = new PdfPTable(2);
        metadataTable.setWidthPercentage(100);
        metadataTable.setSpacingAfter(15);
        
        addTableRow(metadataTable, "Report ID:", report.getId().toString(), SMALL_FONT);
        addTableRow(metadataTable, "Vote Count:", report.getVoteCount().toString(), SMALL_FONT);
        
        if (report.getImagePath() != null && !report.getImagePath().isEmpty()) {
            addTableRow(metadataTable, "Has Image:", "Yes", SMALL_FONT);
        }
        
        document.add(metadataTable);
    }

    private void addTableRow(PdfPTable table, String label, String value, Font font) {
        PdfPCell labelCell = new PdfPCell(new Phrase(label, new Font(font.getFamily(), font.getSize(), Font.BOLD)));
        labelCell.setBorder(Rectangle.NO_BORDER);
        labelCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        labelCell.setPaddingBottom(5);
        table.addCell(labelCell);
        
        PdfPCell valueCell = new PdfPCell(new Phrase(value, font));
        valueCell.setBorder(Rectangle.NO_BORDER);
        valueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        valueCell.setPaddingBottom(5);
        table.addCell(valueCell);
    }

    private boolean canUserAccessReport(Report report, User user) {
        // Admin and org admin can access all reports
        if (user.getRole() == User.Role.ADMIN || user.getRole() == User.Role.ORG_ADMIN) {
            return true;
        }
        
        // Users can access their own reports
        if (report.getReporter().getId().equals(user.getId())) {
            return true;
        }
        
        // Assigned users can access reports assigned to them
        if (report.getAssignedTo() != null && report.getAssignedTo().getId().equals(user.getId())) {
            return true;
        }
        
        // Public reports can be accessed by anyone
        return true; // Assuming all reports are public for now
    }
}

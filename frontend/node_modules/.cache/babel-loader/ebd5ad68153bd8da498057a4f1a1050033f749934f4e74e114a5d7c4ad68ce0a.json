{"ast":null,"code":"import api, { publicApi } from \"./api\";\nexport const reportService = {\n  // Get all reports\n  getReports: (params = {}) => {\n    return api.get(\"/api/reports\", {\n      params\n    });\n  },\n  // Get public reports\n  getPublicReports: (params = {}) => {\n    console.log(\"Fetching public reports with params:\", params);\n    return publicApi.get(\"/api/public/reports\", {\n      params\n    }).catch(error => {\n      console.error(\"API Error in getPublicReports:\", error.response || error);\n      throw error;\n    });\n  },\n  // Get report by ID\n  getReportById: id => {\n    return api.get(`/api/reports/${id}`);\n  },\n  // Create new report\n  createReport: (reportData, image) => {\n    const formData = new FormData();\n\n    // Append report data\n    Object.keys(reportData).forEach(key => {\n      if (reportData[key] !== null && reportData[key] !== undefined) {\n        formData.append(key, reportData[key]);\n      }\n    });\n\n    // Append image if provided\n    if (image) {\n      formData.append(\"image\", image);\n    }\n    return api.post(\"/api/reports\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  },\n  // Get user's reports\n  getUserReports: (params = {}) => {\n    return api.get(\"/api/reports/my-reports\", {\n      params\n    });\n  },\n  // Get reports in area\n  getReportsInArea: bounds => {\n    return api.get(\"/api/reports/area\", {\n      params: bounds\n    });\n  },\n  // Vote for report\n  voteForReport: reportId => {\n    return api.post(`/api/reports/${reportId}/vote`);\n  },\n  // Update report status (admin only)\n  updateReportStatus: (reportId, status, resolutionNotes) => {\n    return api.put(`/api/reports/${reportId}/status`, null, {\n      params: {\n        status,\n        resolutionNotes\n      }\n    });\n  },\n  // Assign report (admin only)\n  assignReport: (reportId, assigneeId) => {\n    return api.put(`/api/reports/${reportId}/assign`, null, {\n      params: {\n        assigneeId\n      }\n    });\n  },\n  // Get report categories\n  getCategories: () => {\n    return publicApi.get(\"/api/public/reports/categories\");\n  },\n  // Get report statuses\n  getStatuses: () => {\n    return publicApi.get(\"/api/public/reports/statuses\");\n  },\n  // Get report priorities\n  getPriorities: () => {\n    return publicApi.get(\"/api/public/reports/priorities\");\n  },\n  // List comments for a report\n  getComments: reportId => {\n    return api.get(`/api/reports/${reportId}/comments`);\n  },\n  // Add a comment to a report\n  addComment: (reportId, content) => {\n    return api.post(`/api/reports/${reportId}/comments`, {\n      content\n    });\n  },\n  // Add a reply to a comment\n  addReply: (reportId, commentId, content) => {\n    return api.post(`/api/reports/${reportId}/comments/${commentId}/replies`, {\n      content\n    });\n  },\n  // Get replies for a comment\n  getReplies: (reportId, commentId) => {\n    return api.get(`/api/reports/${reportId}/comments/${commentId}/replies`);\n  },\n  // Toggle reaction on a comment\n  toggleReaction: (reportId, commentId, reactionType) => {\n    return api.post(`/api/reports/${reportId}/comments/${commentId}/reactions`, {\n      type: reactionType\n    });\n  }\n};","map":{"version":3,"names":["api","publicApi","reportService","getReports","params","get","getPublicReports","console","log","catch","error","response","getReportById","id","createReport","reportData","image","formData","FormData","Object","keys","forEach","key","undefined","append","post","headers","getUserReports","getReportsInArea","bounds","voteForReport","reportId","updateReportStatus","status","resolutionNotes","put","assignReport","assigneeId","getCategories","getStatuses","getPriorities","getComments","addComment","content","addReply","commentId","getReplies","toggleReaction","reactionType","type"],"sources":["E:/Competition/Hackathon/Fixpoint_javafest/FixPoint/frontend/src/services/reportService.js"],"sourcesContent":["import api, { publicApi } from \"./api\";\r\n\r\nexport const reportService = {\r\n  // Get all reports\r\n  getReports: (params = {}) => {\r\n    return api.get(\"/api/reports\", { params });\r\n  },\r\n\r\n  // Get public reports\r\n  getPublicReports: (params = {}) => {\r\n    console.log(\"Fetching public reports with params:\", params);\r\n    return publicApi.get(\"/api/public/reports\", { params }).catch((error) => {\r\n      console.error(\"API Error in getPublicReports:\", error.response || error);\r\n      throw error;\r\n    });\r\n  },\r\n\r\n  // Get report by ID\r\n  getReportById: (id) => {\r\n    return api.get(`/api/reports/${id}`);\r\n  },\r\n\r\n  // Create new report\r\n  createReport: (reportData, image) => {\r\n    const formData = new FormData();\r\n\r\n    // Append report data\r\n    Object.keys(reportData).forEach((key) => {\r\n      if (reportData[key] !== null && reportData[key] !== undefined) {\r\n        formData.append(key, reportData[key]);\r\n      }\r\n    });\r\n\r\n    // Append image if provided\r\n    if (image) {\r\n      formData.append(\"image\", image);\r\n    }\r\n\r\n    return api.post(\"/api/reports\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  },\r\n\r\n  // Get user's reports\r\n  getUserReports: (params = {}) => {\r\n    return api.get(\"/api/reports/my-reports\", { params });\r\n  },\r\n\r\n  // Get reports in area\r\n  getReportsInArea: (bounds) => {\r\n    return api.get(\"/api/reports/area\", { params: bounds });\r\n  },\r\n\r\n  // Vote for report\r\n  voteForReport: (reportId) => {\r\n    return api.post(`/api/reports/${reportId}/vote`);\r\n  },\r\n\r\n  // Update report status (admin only)\r\n  updateReportStatus: (reportId, status, resolutionNotes) => {\r\n    return api.put(`/api/reports/${reportId}/status`, null, {\r\n      params: { status, resolutionNotes },\r\n    });\r\n  },\r\n\r\n  // Assign report (admin only)\r\n  assignReport: (reportId, assigneeId) => {\r\n    return api.put(`/api/reports/${reportId}/assign`, null, {\r\n      params: { assigneeId },\r\n    });\r\n  },\r\n\r\n  // Get report categories\r\n  getCategories: () => {\r\n    return publicApi.get(\"/api/public/reports/categories\");\r\n  },\r\n\r\n  // Get report statuses\r\n  getStatuses: () => {\r\n    return publicApi.get(\"/api/public/reports/statuses\");\r\n  },\r\n\r\n  // Get report priorities\r\n  getPriorities: () => {\r\n    return publicApi.get(\"/api/public/reports/priorities\");\r\n  },\r\n\r\n  // List comments for a report\r\n  getComments: (reportId) => {\r\n    return api.get(`/api/reports/${reportId}/comments`);\r\n  },\r\n\r\n  // Add a comment to a report\r\n  addComment: (reportId, content) => {\r\n    return api.post(`/api/reports/${reportId}/comments`, { content });\r\n  },\r\n\r\n  // Add a reply to a comment\r\n  addReply: (reportId, commentId, content) => {\r\n    return api.post(`/api/reports/${reportId}/comments/${commentId}/replies`, {\r\n      content,\r\n    });\r\n  },\r\n\r\n  // Get replies for a comment\r\n  getReplies: (reportId, commentId) => {\r\n    return api.get(`/api/reports/${reportId}/comments/${commentId}/replies`);\r\n  },\r\n\r\n  // Toggle reaction on a comment\r\n  toggleReaction: (reportId, commentId, reactionType) => {\r\n    return api.post(\r\n      `/api/reports/${reportId}/comments/${commentId}/reactions`,\r\n      { type: reactionType }\r\n    );\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from './api';\nexport const reportService = {\n  // Get all reports\n  getReports: (params = {}) => {\n    return api.get('/api/reports', {\n      params\n    });\n  },\n  // Get public reports\n  getPublicReports: (params = {}) => {\n    return api.get('/api/public/reports', {\n      params\n    });\n  },\n  // Get report by ID\n  getReportById: id => {\n    return api.get(`/api/reports/${id}`);\n  },\n  // Create new report\n  createReport: (reportData, image) => {\n    const formData = new FormData();\n\n    // Append report data\n    Object.keys(reportData).forEach(key => {\n      if (reportData[key] !== null && reportData[key] !== undefined) {\n        formData.append(key, reportData[key]);\n      }\n    });\n\n    // Append image if provided\n    if (image) {\n      formData.append('image', image);\n    }\n    return api.post('/api/reports', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get user's reports\n  getUserReports: (params = {}) => {\n    return api.get('/api/reports/my-reports', {\n      params\n    });\n  },\n  // Get reports in area\n  getReportsInArea: bounds => {\n    return api.get('/api/reports/area', {\n      params: bounds\n    });\n  },\n  // Vote for report\n  voteForReport: reportId => {\n    return api.post(`/api/reports/${reportId}/vote`);\n  },\n  // Update report status (admin only)\n  updateReportStatus: (reportId, status, resolutionNotes) => {\n    return api.put(`/api/reports/${reportId}/status`, null, {\n      params: {\n        status,\n        resolutionNotes\n      }\n    });\n  },\n  // Assign report (admin only)\n  assignReport: (reportId, assigneeId) => {\n    return api.put(`/api/reports/${reportId}/assign`, null, {\n      params: {\n        assigneeId\n      }\n    });\n  },\n  // Get report categories\n  getCategories: () => {\n    return api.get('/api/public/reports/categories');\n  },\n  // Get report statuses\n  getStatuses: () => {\n    return api.get('/api/public/reports/statuses');\n  },\n  // Get report priorities\n  getPriorities: () => {\n    return api.get('/api/public/reports/priorities');\n  }\n};","map":{"version":3,"names":["api","reportService","getReports","params","get","getPublicReports","getReportById","id","createReport","reportData","image","formData","FormData","Object","keys","forEach","key","undefined","append","post","headers","getUserReports","getReportsInArea","bounds","voteForReport","reportId","updateReportStatus","status","resolutionNotes","put","assignReport","assigneeId","getCategories","getStatuses","getPriorities"],"sources":["E:/Competition/Hackathon/Fixpoint_javafest/FixPoint/frontend/src/services/reportService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const reportService = {\r\n  // Get all reports\r\n  getReports: (params = {}) => {\r\n    return api.get('/api/reports', { params });\r\n  },\r\n\r\n  // Get public reports\r\n  getPublicReports: (params = {}) => {\r\n    return api.get('/api/public/reports', { params });\r\n  },\r\n\r\n  // Get report by ID\r\n  getReportById: (id) => {\r\n    return api.get(`/api/reports/${id}`);\r\n  },\r\n\r\n  // Create new report\r\n  createReport: (reportData, image) => {\r\n    const formData = new FormData();\r\n    \r\n    // Append report data\r\n    Object.keys(reportData).forEach(key => {\r\n      if (reportData[key] !== null && reportData[key] !== undefined) {\r\n        formData.append(key, reportData[key]);\r\n      }\r\n    });\r\n    \r\n    // Append image if provided\r\n    if (image) {\r\n      formData.append('image', image);\r\n    }\r\n    \r\n    return api.post('/api/reports', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Get user's reports\r\n  getUserReports: (params = {}) => {\r\n    return api.get('/api/reports/my-reports', { params });\r\n  },\r\n\r\n  // Get reports in area\r\n  getReportsInArea: (bounds) => {\r\n    return api.get('/api/reports/area', { params: bounds });\r\n  },\r\n\r\n  // Vote for report\r\n  voteForReport: (reportId) => {\r\n    return api.post(`/api/reports/${reportId}/vote`);\r\n  },\r\n\r\n  // Update report status (admin only)\r\n  updateReportStatus: (reportId, status, resolutionNotes) => {\r\n    return api.put(`/api/reports/${reportId}/status`, null, {\r\n      params: { status, resolutionNotes }\r\n    });\r\n  },\r\n\r\n  // Assign report (admin only)\r\n  assignReport: (reportId, assigneeId) => {\r\n    return api.put(`/api/reports/${reportId}/assign`, null, {\r\n      params: { assigneeId }\r\n    });\r\n  },\r\n\r\n  // Get report categories\r\n  getCategories: () => {\r\n    return api.get('/api/public/reports/categories');\r\n  },\r\n\r\n  // Get report statuses\r\n  getStatuses: () => {\r\n    return api.get('/api/public/reports/statuses');\r\n  },\r\n\r\n  // Get report priorities\r\n  getPriorities: () => {\r\n    return api.get('/api/public/reports/priorities');\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACAC,UAAU,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC3B,OAAOH,GAAG,CAACI,GAAG,CAAC,cAAc,EAAE;MAAED;IAAO,CAAC,CAAC;EAC5C,CAAC;EAED;EACAE,gBAAgB,EAAEA,CAACF,MAAM,GAAG,CAAC,CAAC,KAAK;IACjC,OAAOH,GAAG,CAACI,GAAG,CAAC,qBAAqB,EAAE;MAAED;IAAO,CAAC,CAAC;EACnD,CAAC;EAED;EACAG,aAAa,EAAGC,EAAE,IAAK;IACrB,OAAOP,GAAG,CAACI,GAAG,CAAC,gBAAgBG,EAAE,EAAE,CAAC;EACtC,CAAC;EAED;EACAC,YAAY,EAAEA,CAACC,UAAU,EAAEC,KAAK,KAAK;IACnC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE/B;IACAC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC,CAACM,OAAO,CAACC,GAAG,IAAI;MACrC,IAAIP,UAAU,CAACO,GAAG,CAAC,KAAK,IAAI,IAAIP,UAAU,CAACO,GAAG,CAAC,KAAKC,SAAS,EAAE;QAC7DN,QAAQ,CAACO,MAAM,CAACF,GAAG,EAAEP,UAAU,CAACO,GAAG,CAAC,CAAC;MACvC;IACF,CAAC,CAAC;;IAEF;IACA,IAAIN,KAAK,EAAE;MACTC,QAAQ,CAACO,MAAM,CAAC,OAAO,EAAER,KAAK,CAAC;IACjC;IAEA,OAAOV,GAAG,CAACmB,IAAI,CAAC,cAAc,EAAER,QAAQ,EAAE;MACxCS,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,cAAc,EAAEA,CAAClB,MAAM,GAAG,CAAC,CAAC,KAAK;IAC/B,OAAOH,GAAG,CAACI,GAAG,CAAC,yBAAyB,EAAE;MAAED;IAAO,CAAC,CAAC;EACvD,CAAC;EAED;EACAmB,gBAAgB,EAAGC,MAAM,IAAK;IAC5B,OAAOvB,GAAG,CAACI,GAAG,CAAC,mBAAmB,EAAE;MAAED,MAAM,EAAEoB;IAAO,CAAC,CAAC;EACzD,CAAC;EAED;EACAC,aAAa,EAAGC,QAAQ,IAAK;IAC3B,OAAOzB,GAAG,CAACmB,IAAI,CAAC,gBAAgBM,QAAQ,OAAO,CAAC;EAClD,CAAC;EAED;EACAC,kBAAkB,EAAEA,CAACD,QAAQ,EAAEE,MAAM,EAAEC,eAAe,KAAK;IACzD,OAAO5B,GAAG,CAAC6B,GAAG,CAAC,gBAAgBJ,QAAQ,SAAS,EAAE,IAAI,EAAE;MACtDtB,MAAM,EAAE;QAAEwB,MAAM;QAAEC;MAAgB;IACpC,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,YAAY,EAAEA,CAACL,QAAQ,EAAEM,UAAU,KAAK;IACtC,OAAO/B,GAAG,CAAC6B,GAAG,CAAC,gBAAgBJ,QAAQ,SAAS,EAAE,IAAI,EAAE;MACtDtB,MAAM,EAAE;QAAE4B;MAAW;IACvB,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,aAAa,EAAEA,CAAA,KAAM;IACnB,OAAOhC,GAAG,CAACI,GAAG,CAAC,gCAAgC,CAAC;EAClD,CAAC;EAED;EACA6B,WAAW,EAAEA,CAAA,KAAM;IACjB,OAAOjC,GAAG,CAACI,GAAG,CAAC,8BAA8B,CAAC;EAChD,CAAC;EAED;EACA8B,aAAa,EAAEA,CAAA,KAAM;IACnB,OAAOlC,GAAG,CAACI,GAAG,CAAC,gCAAgC,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}